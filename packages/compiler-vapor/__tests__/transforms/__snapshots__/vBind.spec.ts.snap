// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler v-bind > .attr modifier 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setAttr(n0, "foo-bar", __id)
      _id = __id
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .attr modifier w/ innerHTML 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setAttr(n0, "innerHTML", __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .attr modifier w/ no expression 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _fooBar, __fooBar
  _renderEffect(() => {
    __fooBar = _ctx.fooBar
    if(_fooBar !== __fooBar) {
      _setAttr(n0, "foo-bar", __fooBar)
      _fooBar = __fooBar
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .attr modifier w/ progress value 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<progress></progress>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setAttr(n0, "value", __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .attr modifier w/ textContent 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setAttr(n0, "textContent", __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .attr modifier w/ value 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setAttr(n0, "value", __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .camel modifier 1`] = `
"import { setDynamicProp as _setDynamicProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, _prev_id, __id
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _prev_id = _setDynamicProp(n0, "fooBar", _prev_id, _ctx.id)
      _id = __id
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .camel modifier w/ dynamic arg 1`] = `
"import { camelize as _camelize, setDynamicProps as _setDynamicProps, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo_id
  _renderEffect(() => 
  _foo_id = _setDynamicProps(n0, _foo_id, [{ [_camelize(_ctx.foo)]: _ctx.id }], true))
  return n0
}"
`;

exports[`compiler v-bind > .camel modifier w/ no expression 1`] = `
"import { setDynamicProp as _setDynamicProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _fooBar, _prev_fooBar, __fooBar
  _renderEffect(() => {
    __fooBar = _ctx.fooBar
    if(_fooBar !== __fooBar) {
      _prev_fooBar = _setDynamicProp(n0, "fooBar", _prev_fooBar, _ctx.fooBar)
      _fooBar = __fooBar
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier (shorthand) 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setDOMProp(n0, "fooBar", __id)
      _id = __id
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier (shorthand) w/ innerHTML 1`] = `
"import { setHtml as _setHtml, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setHtml(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier (shorthand) w/ no expression 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _fooBar, __fooBar
  _renderEffect(() => {
    __fooBar = _ctx.fooBar
    if(_fooBar !== __fooBar) {
      _setDOMProp(n0, "fooBar", __fooBar)
      _fooBar = __fooBar
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier (shorthand) w/ progress value 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<progress></progress>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setDOMProp(n0, "value", __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier (shorthand) w/ textContent 1`] = `
"import { setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setText(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier (shorthand) w/ value 1`] = `
"import { setValue as _setValue, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setValue(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setDOMProp(n0, "fooBar", __id)
      _id = __id
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier w/ dynamic arg 1`] = `
"import { setDynamicProps as _setDynamicProps, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _fooBar_id
  _renderEffect(() => 
  _fooBar_id = _setDynamicProps(n0, _fooBar_id, [{ ["." + _ctx.fooBar]: _ctx.id }], true))
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier w/ innerHTML 1`] = `
"import { setHtml as _setHtml, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setHtml(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier w/ no expression 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _fooBar, __fooBar
  _renderEffect(() => {
    __fooBar = _ctx.fooBar
    if(_fooBar !== __fooBar) {
      _setDOMProp(n0, "fooBar", __fooBar)
      _fooBar = __fooBar
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier w/ progress value 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<progress></progress>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setDOMProp(n0, "value", __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier w/ textContent 1`] = `
"import { setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setText(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > .prop modifier w/ value 1`] = `
"import { setValue as _setValue, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setValue(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > :innerHTML 1`] = `
"import { setHtml as _setHtml, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setHtml(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > :textContext 1`] = `
"import { setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setText(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > :value 1`] = `
"import { setValue as _setValue, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<input>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _setValue(n0, __foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > :value w/ progress 1`] = `
"import { setDynamicProp as _setDynamicProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<progress></progress>")

export function render(_ctx) {
  const n0 = t0()
  let _foo, _prev_foo, __foo
  _renderEffect(() => {
    __foo = _ctx.foo
    if(_foo !== __foo) {
      _prev_foo = _setDynamicProp(n0, "value", _prev_foo, _ctx.foo)
      _foo = __foo
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > HTML global attributes should set as dom prop 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id, _title, __title, _lang, __lang, _dir, __dir, _tabindex, __tabindex
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setDOMProp(n0, "id", __id)
      _id = __id
    }
    __title = _ctx.title
    if(_title !== __title) {
      _setDOMProp(n0, "title", __title)
      _title = __title
    }
    __lang = _ctx.lang
    if(_lang !== __lang) {
      _setDOMProp(n0, "lang", __lang)
      _lang = __lang
    }
    __dir = _ctx.dir
    if(_dir !== __dir) {
      _setDOMProp(n0, "dir", __dir)
      _dir = __dir
    }
    __tabindex = _ctx.tabindex
    if(_tabindex !== __tabindex) {
      _setDOMProp(n0, "tabindex", __tabindex)
      _tabindex = __tabindex
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > MathML global attributes should set as dom prop 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<math></math>")

export function render(_ctx) {
  const n0 = t0()
  let _autofucus, __autofucus, _dir, __dir, _displaystyle, __displaystyle, _mathcolor, __mathcolor, _tabindex, __tabindex
  _renderEffect(() => {
    __autofucus = _ctx.autofucus
    if(_autofucus !== __autofucus) {
      _setDOMProp(n0, "autofucus", __autofucus)
      _autofucus = __autofucus
    }
    __dir = _ctx.dir
    if(_dir !== __dir) {
      _setDOMProp(n0, "dir", __dir)
      _dir = __dir
    }
    __displaystyle = _ctx.displaystyle
    if(_displaystyle !== __displaystyle) {
      _setDOMProp(n0, "displaystyle", __displaystyle)
      _displaystyle = __displaystyle
    }
    __mathcolor = _ctx.mathcolor
    if(_mathcolor !== __mathcolor) {
      _setDOMProp(n0, "mathcolor", __mathcolor)
      _mathcolor = __mathcolor
    }
    __tabindex = _ctx.tabindex
    if(_tabindex !== __tabindex) {
      _setDOMProp(n0, "tabindex", __tabindex)
      _tabindex = __tabindex
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > SVG global attributes should set as dom prop 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<svg></svg>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id, _lang, __lang, _tabindex, __tabindex
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setDOMProp(n0, "id", __id)
      _id = __id
    }
    __lang = _ctx.lang
    if(_lang !== __lang) {
      _setDOMProp(n0, "lang", __lang)
      _lang = __lang
    }
    __tabindex = _ctx.tabindex
    if(_tabindex !== __tabindex) {
      _setDOMProp(n0, "tabindex", __tabindex)
      _tabindex = __tabindex
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > attributes must be set as attribute 1`] = `
"import { setAttr as _setAttr, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("<input>")
const t2 = _template("<textarea></textarea>")
const t3 = _template("<img>")
const t4 = _template("<video></video>")
const t5 = _template("<canvas></canvas>")
const t6 = _template("<source>")

export function render(_ctx) {
  const n0 = t0()
  const n1 = t1()
  const n2 = t2()
  const n3 = t3()
  const n4 = t4()
  const n5 = t5()
  const n6 = t6()
  let _spellcheck, __spellcheck, _draggable, __draggable, _translate, __translate, _form, __form, _list, __list, _type, __type, _width, __width, _height, __height
  _renderEffect(() => {
    __spellcheck = _ctx.spellcheck
    if(_spellcheck !== __spellcheck) {
      _setAttr(n0, "spellcheck", __spellcheck)
      _spellcheck = __spellcheck
    }
    __draggable = _ctx.draggable
    if(_draggable !== __draggable) {
      _setAttr(n0, "draggable", __draggable)
      _draggable = __draggable
    }
    __translate = _ctx.translate
    if(_translate !== __translate) {
      _setAttr(n0, "translate", __translate)
      _translate = __translate
    }
    __form = _ctx.form
    if(_form !== __form) {
      _setAttr(n0, "form", __form)
      _form = __form
    }
    __list = _ctx.list
    if(_list !== __list) {
      _setAttr(n1, "list", __list)
      _list = __list
    }
    __type = _ctx.type
    if(_type !== __type) {
      _setAttr(n2, "type", __type)
      _type = __type
    }
    __width = _ctx.width
    if(_width !== __width) {
      _setAttr(n3, "width", __width)
      _setAttr(n4, "width", __width)
      _setAttr(n5, "width", __width)
      _setAttr(n6, "width", __width)
      _width = __width
    }
    __height = _ctx.height
    if(_height !== __height) {
      _setAttr(n3, "height", __height)
      _setAttr(n4, "height", __height)
      _setAttr(n5, "height", __height)
      _setAttr(n6, "height", __height)
      _height = __height
    }
  })
  return [n0, n1, n2, n3, n4, n5, n6]
}"
`;

exports[`compiler v-bind > basic 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setDOMProp(n0, "id", __id)
      _id = __id
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > bind member expression 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _obj, __obj
  _renderEffect(() => {
    __obj = _ctx.obj.count.bar
    if(_obj !== __obj) {
      _setDOMProp(n0, "id", __obj)
      _obj = __obj
    }
  })
  return [n0, n1]
}"
`;

exports[`compiler v-bind > dynamic arg 1`] = `
"import { setDynamicProps as _setDynamicProps, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id_title
  _renderEffect(() => 
  _id_title = _setDynamicProps(n0, _id_title, [{ [_ctx.id]: _ctx.id, [_ctx.title]: _ctx.title }], true))
  return n0
}"
`;

exports[`compiler v-bind > dynamic arg w/ static attribute 1`] = `
"import { setDynamicProps as _setDynamicProps, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _prev_id
  _renderEffect(() => 
  _prev_id = _setDynamicProps(n0, _prev_id, [{ [_ctx.id]: _ctx.id, foo: "bar", checked: "" }], true))
  return n0
}"
`;

exports[`compiler v-bind > no expression (shorthand) 1`] = `
"import { setDynamicProp as _setDynamicProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _camelCase, _prev_camelCase, __camelCase
  _renderEffect(() => {
    __camelCase = _ctx.camelCase
    if(_camelCase !== __camelCase) {
      _prev_camelCase = _setDynamicProp(n0, "camel-case", _prev_camelCase, _ctx.camelCase)
      _camelCase = __camelCase
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > no expression 1`] = `
"import { setDOMProp as _setDOMProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  let _id, __id
  _renderEffect(() => {
    __id = _ctx.id
    if(_id !== __id) {
      _setDOMProp(n0, "id", __id)
      _id = __id
    }
  })
  return n0
}"
`;

exports[`compiler v-bind > number value 1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, { depth: () => (0) }, null, true)
  return n0
}"
`;

exports[`compiler v-bind > should error if empty expression 1`] = `
"import { template as _template } from 'vue';
const t0 = _template("<div arg></div>")

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;
